name: "Deploy current branch to staging environment"

on:
  schedule:
    - cron: "0 */12 * * *" # This runs every 12 hours but only from main
  #push: staging should only be PR'd into
  #  branches: ["staging"]
  pull_request:
    branches: ["staging"]

concurrency:
  group: stagingenvironment
permissions:
  contents: write

jobs:
  terraform-deploy-to-staging:
    runs-on: ubuntu-latest
    environment: staging

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check -recursive

      # Runs Terraform using envionrment variables
      - name: Terraform Apply
        id: terraformapply
        continue-on-error: true #even if apply fails, we want to try destroy to clean-up
        run: |
          if [ -f testing/test.tfvars ]; then
            terraform apply -var-file=testing/test.tfvars \
                          -var "jamfpro_instance_url=${{ secrets.jamfpro_instance_url }}" \
                          -var "jamfpro_client_id=${{ secrets.jamfpro_client_id }}" \
                          -var "jamfpro_client_secret=${{ secrets.jamfpro_client_secret }}" \
                          -var "jsc_username=${{ secrets.jsc_username }}" \
                          -var "jsc_password=${{ secrets.jsc_password }}" \
                          -var "include_ej_base=true" \
                          -var "include_ej_jsc_config=true" \
                          -auto-approve \
                          -parallelism=1
          else
            echo "Not test file provided. Using standard config only"
            terraform apply -var "jamfpro_instance_url=${{ secrets.jamfpro_instance_url }}" \
                          -var "jamfpro_client_id=${{ secrets.jamfpro_client_id }}" \
                          -var "jamfpro_client_secret=${{ secrets.jamfpro_client_secret }}" \
                          -var "jsc_username=${{ secrets.jsc_username }}" \
                          -var "jsc_password=${{ secrets.jsc_password }}" \
                          -var "include_ej_base=true" \
                          -var "include_ej_jsc_config=true" \
                          -auto-approve \
                          -parallelism=1
          fi

      # Destroys Terraform using envionrment variables
      - name: Terraform Destroy
        run: |
          if [ -f testing/test.tfvars ]; then
            terraform destroy -var-file=testing/test.tfvars \
                          -var "jamfpro_instance_url=${{ secrets.jamfpro_instance_url }}" \
                          -var "jamfpro_client_id=${{ secrets.jamfpro_client_id }}" \
                          -var "jamfpro_client_secret=${{ secrets.jamfpro_client_secret }}" \
                          -var "jsc_username=${{ secrets.jsc_username }}" \
                          -var "jsc_password=${{ secrets.jsc_password }}" \
                          -var "include_ej_base=true" \
                          -var "include_ej_jsc_config=true" \
                          -auto-approve \
                          -parallelism=1 \
                          -refresh=false
          else
            echo "Not test file provided. Using standard config only"
            terraform destroy -var "jamfpro_instance_url=${{ secrets.jamfpro_instance_url }}" \
                          -var "jamfpro_client_id=${{ secrets.jamfpro_client_id }}" \
                          -var "jamfpro_client_secret=${{ secrets.jamfpro_client_secret }}" \
                          -var "jsc_username=${{ secrets.jsc_username }}" \
                          -var "jsc_password=${{ secrets.jsc_password }}" \
                          -var "include_ej_base=true" \
                          -var "include_ej_jsc_config=true" \
                          -auto-approve \
                          -parallelism=1 \
                          -refresh=false
          fi
      - name: Clear testing/test.tfvars
        run: |
          if [ -f testing/test.tfvars ]; then
            rm testing/test.tfvars
            echo "Deleted testing/test.tfvars"
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add testing/test.tfvars
            git commit -m "Deleted test.tfvars"
            git push
          else
            echo "testing/test.tfvars didn't exist"
          fi

      # Checks that Terraform Apply ran ok - if it didn't, we exit 1
      - name: Exit code 1 if Terraform Apply failed
        if: ${{ steps.terraformapply.outcome != 'success' }}
        run: exit 1
