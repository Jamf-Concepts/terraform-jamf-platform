name: "Check all spec.yaml boolean options with Terraform Apply"

on:
  schedule:
    - cron: "1 */12 * * *" # This runs every 12 hours but only from main (1 hour offset)
  push:
    branches: ["specrunner2"]
  pull_request:
    branches: ["specrunner2", "main"]

concurrency:
  group: stagingenvironment
permissions:
  contents: read

jobs:
  terraform-deploy-all-modules-to-staging:
    runs-on: ubuntu-latest
    environment: staging

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      #        with:
      #          ref: ${{ github.event.pull_request.head.ref }}

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Store all spec.yml booleans in temp file
      - name: Get Spec.yml bools
        run: |
          grep -B 1 "<boolean>" "spec.yml" | grep "key:" | sed 's/.*key: //;s/$/ = true/' | tr -d ' ' | sort | uniq | tee "/tmp/outputbool.txt"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check -recursive

      # Runs Terraform using envionrment variables
      - name: Terraform Apply and Destroy all spec.yml options one by one
        id: terraformapplyanddestroy
        continue-on-error: false
        run: |
          # Create a file to log failures
          fail_log="/tmp/terraform_failures.log"
          > "$fail_log"  # Clear the file if it exists

          non_zero_exit_code_found="false"

          # Read each line from the output file
          while IFS= read -r line; do
            # Run terraform apply with the line as a -var and capture errors
            echo "Applying: $line"
            terraform apply -auto-approve -var "$line" -var "jamfpro_instance_url=${{ secrets.jamfpro_instance_url }}" \
                          -var "jamfpro_client_id=${{ secrets.jamfpro_client_id }}" \
                          -var "jamfpro_client_secret=${{ secrets.jamfpro_client_secret }}" \
                          -var "jsc_username=${{ secrets.jsc_username }}" \
                          -var "jsc_password=${{ secrets.jsc_password }}" \
                          -var "jsc_applicationid=${{ secrets.jsc_applicationid }}" \
                          -var "jsc_applicationsecret=${{ secrets.jsc_applicationsecret }}" \
                          -parallelism=1 \
            || exit_code=$?  # Capture the exit code
            # Check if the exit code is present
            if [ "$exit_code" -ne 0 ]; then
              echo "writing to logs failure of apply"
              echo "Terraform apply failed with exit code 1 for: $line" >> "$fail_log"
              non_zero_exit_code_found="true"  # Set to true if any exit code other than 0 is found
              exit_code=0 #clear exit code
            fi
            terraform destroy -auto-approve -var "$line" -var "jamfpro_instance_url=${{ secrets.jamfpro_instance_url }}" \
                          -var "jamfpro_client_id=${{ secrets.jamfpro_client_id }}" \
                          -var "jamfpro_client_secret=${{ secrets.jamfpro_client_secret }}" \
                          -var "jsc_username=${{ secrets.jsc_username }}" \
                          -var "jsc_password=${{ secrets.jsc_password }}" \
                          -var "jsc_applicationid=${{ secrets.jsc_applicationid }}" \
                          -var "jsc_applicationsecret=${{ secrets.jsc_applicationsecret }}" \
                          -parallelism=1 \
                          -refresh=false \
            || exit_code_destroy=$?  # Capture the exit code
            if [ "$exit_code_destroy" -ne 0 ]; then
              echo "destroy failed so waiting 120 seconds before trying again" #tomcats please sync
              sleep 121 
              exit_code_destroy=0 #clear error code
              terraform destroy -auto-approve -var "$line" -var "jamfpro_instance_url=${{ secrets.jamfpro_instance_url }}" \
                          -var "jamfpro_client_id=${{ secrets.jamfpro_client_id }}" \
                          -var "jamfpro_client_secret=${{ secrets.jamfpro_client_secret }}" \
                          -var "jsc_username=${{ secrets.jsc_username }}" \
                          -var "jsc_password=${{ secrets.jsc_password }}" \
                          -var "jsc_applicationid=${{ secrets.jsc_applicationid }}" \
                          -var "jsc_applicationsecret=${{ secrets.jsc_applicationsecret }}" \
                          -parallelism=1 \
                          -refresh=false
            fi

          done < /tmp/outputbool.txt

          # Set output variable based on exit code
          echo "non_zero_exit_code_found=$non_zero_exit_code_found" >> $GITHUB_ENV

      # Checks that Terraform Apply ran ok - if it didn't, we exit 1
      - name: Check for non-zero exit code
        run: |
          if [ "${{ env.non_zero_exit_code_found }}" == "true" ]; then
            echo "Terraform apply encountered failures with a non-zero exit code. Check the log for details."
            cat /tmp/terraform_failures.log
            exit code 1
          else
            echo "All applies were successful."
          fi
